module.exports = function(grunt) {

  'use strict';

  // Time how long tasks take. Can help when optimizing build times
  require('time-grunt')(grunt);

  // Load grunt tasks automatically
  require('load-grunt-tasks')(grunt);

  // Configurable paths
  var config = {
    app: 'app',
    dist: 'dist',
    test: 'test',
    temp: '.tmp'
  };

  // Project configuration.
  grunt.initConfig({
    pkg: grunt.file.readJSON('package.json'),
    config: config,
    
    // cssmin: {
    //   files: [{
    //     expand: true,
    //     cwd: '<%= config.app %>/styles/',
    //     src: ['*.css', '!*.min.css'],
    //     dest: '<%= config.dist %>/styles/',
    //     ext: '.min.css'
    //   }]
    // },
    // concat: {
    //   generated: {
    //     files: [
    //       {
    //         dest: '<%= config.temp %>/concat/scripts/<%= pkg.name %>.js',
    //         src: ['<%= config.app %>/scripts/*.js']
    //       }
    //     ]
    //   },
    //   dist: {}
    // },
    
    uglify: {
      options: {
        banner: '/*! Generated by grunt-contrib-uglify on <%= grunt.template.today("yyyy-mm-dd") %> */\n',
        compress: {
          drop_console: true // Remove console.log calls
        }
      }
    },
    
    // Empties folders to start fresh
    clean: {
      all: {
        files: [{
          dot: true,
          src: [
            '<%= config.temp %>',
            '<%= config.dist %>',
            '!<%= config.dist %>/.git*'
          ]
        }]
      },
      temp: '<%= config.temp %>'
    },

    jshint: {
      all: [
        'Gruntfile.js', 'karma.conf.js',
        '<%= config.app %>/scripts/**/*.js',
        '!<%= config.app %>/scripts/vendor/*',
        '<%= config.test %>/**/*.js'
      ]
    },

    csslint: {
      strict: {
        options: {
          import: 2
        },
        src: ['<%= config.app %>/styles/**/*.css']
      }
    },

    imagemin: {
      dist: {
        files: [{
          expand: true,
          cwd: '<%= config.app %>/images',
          src: '**/*.{gif,jpeg,jpg,png}',
          dest: '<%= config.dist %>/images'
        }]
      }
    },

    useminPrepare: {
      options: {
        dest: '<%= config.dist %>',
        flow: {
          html: {
            steps: {
              js: ['concat', 'uglifyjs'],
              css: ['cssmin']
            },
            post: {}
          }
        }
      },
      html: ['<%= config.dist %>/**/*.html', '!<%= config.dist %>/tempates/**/*.html']
    },

    // Performs rewrites based on rev and the useminPrepare configuration
    usemin: {
      options: {
        dirs: ['<%= config.temp %>']
      },
      html: ['<%= config.dist %>/**/*.html', '!<%= config.dist %>/tempates/**/*.html'],
      css: ['<%= config.dist %>/styles/**/*.css'],
      js: ['<%= config.dist %>/scripts/**/*.js']
    },

    htmlmin: {
      dist: {
        options: {
          collapseBooleanAttributes: true,
          collapseWhitespace: true,
          conservativeCollapse: true,
          removeAttributeQuotes: true,
          removeCommentsFromCDATA: true,
          removeEmptyAttributes: true,
          removeOptionalTags: true,
          removeRedundantAttributes: true,
          useShortDoctype: true
        },
        files: [{
          expand: true,
          cwd: '<%= config.dist %>',
          src: '**/*.html',
          dest: '<%= config.dist %>'
        }]
      }
    },

    // Add vendor prefixed styles
    autoprefixer: {
      options: {
        browsers: ['> 1%', 'last 2 versions']
      },
      dist: {
        files: [{
          expand: true,
          cwd: '<%= config.app %>/styles/',
          src: '{,*/}*.css',
          dest: '<%= config.temp %>/styles/'
        }]
      }
    },

    // Renames files for browser caching purposes
    rev: {
      dist: {
        files: {
          src: [
            '<%= config.dist %>/scripts/{,*/}*.js',
            '<%= config.dist %>/styles/{,*/}*.css',
            '<%= config.dist %>/images/{,*/}*.*',
            '<%= config.dist %>/styles/fonts/{,*/}*.*',
            '<%= config.dist %>/*.{ico,png}'
          ]
        }
      }
    },

    // Copies remaining files to places other tasks can use
    copy: {
      html: {
        expand: true,
        cwd: '<%= config.app %>',
        src: '**/*.html',
        dest: '<%= config.dist %>/',
      }
    },

    requirejs: {
      dist: {
        options: {
            baseUrl: '<%= config.app %>/scripts',
            optimize: 'uglify',
            preserveLicenseComments: false,
            useStrict: true,
            name: 'main',
            out: '<%= config.dist %>/scripts/app.min.js',
            mainConfigFile: '<%= config.app %>/scripts/main.js'
        }
      }
    },

    jasmine: {
      main: {
        src : '<%= config.app %>/scripts/*.js', 
        options : {
          specs : '<%= config.test %>/spec/*.js'
        }
      }
    },

    karma: {  
      unit: {
        configFile: 'karma.conf.js',
      }
    },

    watch: {
      watchSrcChange: {
        files: ['<%= jasmine.src %>'],
        tasks: ['jshint', 'jasmine']
      },
      watchJsChange: {
        files: ['<%= jshint.files %>'],
        tasks: ['jshint']
      }
    },

    connect: {
      options: {
        port: 9000,
        open: true,
        livereload: 35729,
        // Change this to '0.0.0.0' to access the server from outside
        hostname: 'localhost'
      },
      dev: {
        options: {
          keepalive: true,
          middleware: function(connect) {
            return [
              connect.static('app'),
              connect().use('/bower_components', connect.static('./bower_components')),
              connect.static(config.app)
            ];
          }
        }
      },
      test: {
        options: {
          base: '<%= config.app %>/',
          keepalive: true
        }
      },
      dist: {
        options: {
          port: 9001,
          base: '<%= config.dist %>/',
          keepalive: true,
          livereload: false
        }
      }
    },
  });

  // Default task(s).
  grunt.registerTask('default', [
    'dev'
  ]);

  grunt.registerTask('test', [
    'validate',
    'karma'
  ]);

  grunt.registerTask('validate', [
    'jshint', 
    'csslint'
  ]);

  grunt.registerTask('dev', [
    'test',
    'connect:dev'
  ]);

  grunt.registerTask('dist', [
    'test',
    'clean:all',
    'imagemin',
    'copy:html',
    'autoprefixer',
    'useminPrepare',
    'concat',
    'uglify',
    'requirejs',
    'cssmin',
    'rev',
    'usemin',
    'htmlmin',
    'clean:temp',
    'connect:dist'
  ]);

  // TODO use rev, grunt-autoprefixer
};